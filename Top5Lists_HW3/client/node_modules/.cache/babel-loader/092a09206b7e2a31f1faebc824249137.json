{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SET_ITEM_NAME_EDIT_ACTIVE: \"SET_ITEM_NAME_EDIT_ACTIVE\",\n  ADD_LIST: \"ADD_LIST\",\n  MARKED_DELETE_LIST: \"MARKED_DELETE_LIST\",\n  DELETE_LIST: \"DELETE_LIST\",\n  UPDATE_TOOLBAR: \"UPDATE_TOOLBAR\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null,\n    hasUndo: false,\n    hasRedo: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            hasUndo: false,\n            hasRedo: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            hasUndo: false,\n            hasRedo: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            hasUndo: false,\n            hasRedo: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            hasUndo: payload.hasUndo,\n            hasRedo: payload.hasRedo\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            hasUndo: false,\n            hasRedo: false\n          });\n        }\n\n      case GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null,\n            hasUndo: false,\n            hasRedo: false\n          });\n        }\n      // ADD LIST\n\n      case GlobalStoreActionType.ADD_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idPairs,\n            currentList: payload.currentList,\n            newListCounter: payload.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            hasUndo: false,\n            hasRedo: false\n          });\n        }\n      // MARK DELETE LIST\n\n      case GlobalStoreActionType.MARKED_DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: store.isListNameEditActive,\n            isItemEditActive: store.isItemEditActive,\n            listMarkedForDeletion: payload.idNamePair,\n            hasUndo: false,\n            hasRedo: false\n          });\n        }\n      // DELETE LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            hasUndo: false,\n            hasRedo: false\n          });\n        }\n      // UPDATE TOOLBAR\n\n      case GlobalStoreActionType.UPDATE_TOOLBAR:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            hasUndo: payload.hasUndo,\n            hasRedo: payload.hasRedo\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    // top5List: top5List\n                    top5List: null\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  }; //Change item name\n\n\n  store.addChangeItemTransaction = function (index, newText) {\n    let oldText = store.currentList.items[index];\n    console.log(oldText);\n    let transaction = new ChangeItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.renameItem = function (index, text) {\n    store.currentList.items[index] = text;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList().then(_ => {\n      store.updateToolbar();\n    });\n  };\n\n  store.updateToolbar = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UPDATE_TOOLBAR,\n      payload: {\n        currentList: store.currentList,\n        hasUndo: tps.hasTransactionToUndo(),\n        hasRedo: tps.hasTransactionToRedo()\n      }\n    });\n  };\n\n  store.undo = function () {\n    if (tps.hasTransactionToUndo()) {\n      tps.undoTransaction();\n    } else {\n      console.log(\"NOTHING TO UNDO\");\n    }\n  };\n\n  store.redo = function () {\n    if (tps.hasTransactionToRedo()) {\n      tps.doTransaction();\n    } else {\n      console.log(\"NOTHING TO REDO\");\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // This enables item name edit\n\n\n  store.setIsItemNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE,\n      payload: {\n        currentList: store.currentList\n      }\n    });\n  }; //function to add list\n\n\n  store.addList = function () {\n    var x;\n\n    async function asyncAddList() {\n      const response = await api.createTop5List({\n        \"name\": `Untitled${store.newListCounter}`,\n        \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n      });\n\n      if (response.data.success) {\n        let id = response.data.top5List._id;\n        const response1 = await api.getTop5ListPairs();\n\n        if (response1.data.success) {\n          let idPairs = response1.data.idNamePairs;\n          const response2 = await api.getTop5ListById(id);\n\n          if (response2.data.success) {\n            let top5List = response2.data.top5List;\n            const response3 = await api.updateTop5ListById(top5List._id, top5List);\n\n            if (response3.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.ADD_LIST,\n                payload: {\n                  newListCounter: store.newListCounter + 1,\n                  idPairs: idPairs,\n                  currentList: top5List\n                }\n              });\n              store.history.push(\"/top5list/\" + top5List._id);\n            }\n          }\n        }\n      }\n\n      console.log(store);\n      console.log(store.newListCounter);\n    }\n\n    asyncAddList();\n  }; //Display modal, if yes then delete marked list, if no then hide modal\n\n\n  store.displayDeleteListModal = function (idNamePair) {\n    storeReducer({\n      type: GlobalStoreActionType.MARKED_DELETE_LIST,\n      payload: {\n        idNamePair: idNamePair\n      }\n    });\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.deleteMarkedList = function () {\n    async function asyncDeleteMarkedList() {\n      const response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n\n      if (response.data.success) {\n        const response1 = await api.getTop5ListPairs();\n\n        if (response1.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_LIST,\n            payload: response1.data.idNamePairs\n          });\n        }\n      }\n    }\n\n    asyncDeleteMarkedList();\n    store.hideDeleteListModal(); //This forces a state update which refreshes the react components\n\n    store.loadIdNamePairs();\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"H0vPho1jB1H2RByXZs6uAJKMqOA=\");","map":{"version":3,"sources":["C:/Users/Jeffrey/Documents/GitHub/CSE316HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SET_ITEM_NAME_EDIT_ACTIVE","ADD_LIST","MARKED_DELETE_LIST","DELETE_LIST","UPDATE_TOOLBAR","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","hasUndo","hasRedo","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","idPairs","idNamePair","changeListName","id","newName","asyncChangeListName","response","getTop5ListById","data","success","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","clearAllTransactions","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","items","i","updateCurrentList","addChangeItemTransaction","index","newText","oldText","renameItem","text","asyncUpdateCurrentList","then","_","updateToolbar","hasTransactionToUndo","hasTransactionToRedo","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","setIsItemNameEditActive","addList","x","asyncAddList","createTop5List","response1","response2","response3","displayDeleteListModal","modal","document","getElementById","classList","add","hideDeleteListModal","remove","deleteMarkedList","asyncDeleteMarkedList","deleteTop5ListById"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    SET_ITEM_NAME_EDIT_ACTIVE: \"SET_ITEM_NAME_EDIT_ACTIVE\",\n    ADD_LIST: \"ADD_LIST\",\n    MARKED_DELETE_LIST: \"MARKED_DELETE_LIST\",\n    DELETE_LIST: \"DELETE_LIST\",\n    UPDATE_TOOLBAR: \"UPDATE_TOOLBAR\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null,\n        hasUndo: false,\n        hasRedo: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    hasUndo: false,\n                    hasRedo: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    hasUndo: false,\n                    hasRedo: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    hasUndo: false,\n                    hasRedo: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    hasUndo: payload.hasUndo,\n                    hasRedo: payload.hasRedo\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    hasUndo: false,\n                    hasRedo: false\n                });\n            }\n\n            case GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null,\n                    hasUndo: false,\n                    hasRedo: false\n                });\n            }\n            // ADD LIST\n            case GlobalStoreActionType.ADD_LIST: {\n                return setStore({\n                    idNamePairs: payload.idPairs,\n                    currentList: payload.currentList,\n                    newListCounter: payload.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    hasUndo: false,\n                    hasRedo: false\n                });\n            }\n            // MARK DELETE LIST\n            case GlobalStoreActionType.MARKED_DELETE_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: store.isListNameEditActive,\n                    isItemEditActive: store.isItemEditActive,\n                    listMarkedForDeletion: payload.idNamePair,\n                    hasUndo: false,\n                    hasRedo: false\n                });\n            }\n            // DELETE LIST\n            case GlobalStoreActionType.DELETE_LIST: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    hasUndo: false,\n                    hasRedo: false\n                });\n            }\n            // UPDATE TOOLBAR\n            case GlobalStoreActionType.UPDATE_TOOLBAR: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    hasUndo: payload.hasUndo,\n                    hasRedo: payload.hasRedo\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        // top5List: top5List\n                                        top5List: null\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        tps.clearAllTransactions();\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    //Change item name\n    store.addChangeItemTransaction = function (index, newText) {\n        let oldText = store.currentList.items[index];\n        console.log(oldText);\n        let transaction = new ChangeItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.renameItem = function (index, text) {\n        store.currentList.items[index] = text;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList().then((_) => {store.updateToolbar()});\n    }\n\n    store.updateToolbar = function () {\n        storeReducer ({\n            type: GlobalStoreActionType.UPDATE_TOOLBAR,\n            payload: {\n                currentList: store.currentList,\n                hasUndo: tps.hasTransactionToUndo(),\n                hasRedo: tps.hasTransactionToRedo()\n            }\n        })\n    }\n\n\n    store.undo = function () {\n        if (tps.hasTransactionToUndo()){\n            tps.undoTransaction();\n        } else {\n            console.log(\"NOTHING TO UNDO\");\n        }\n    }\n    store.redo = function () {\n        if (tps.hasTransactionToRedo()){\n            tps.doTransaction();\n        } else {\n            console.log(\"NOTHING TO REDO\");\n        }\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // This enables item name edit\n    store.setIsItemNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE,\n            payload: {\n                currentList: store.currentList\n            }\n        });\n    }\n\n    //function to add list\n    store.addList = function () {\n        var x;\n        async function asyncAddList () {\n            const response = await api.createTop5List({\n                \"name\": `Untitled${store.newListCounter}`,\n                \"items\": [\n                    \"?\",\n                    \"?\",\n                    \"?\",\n                    \"?\",\n                    \"?\"\n                ]\n            });\n            if (response.data.success){\n                let id = response.data.top5List._id;\n                const response1 = await api.getTop5ListPairs();\n                if (response1.data.success){\n                    let idPairs = response1.data.idNamePairs;\n                    const response2 = await api.getTop5ListById(id);\n                    if (response2.data.success){\n                        let top5List = response2.data.top5List;\n                        const response3 = await api.updateTop5ListById(top5List._id, top5List);\n                        if (response3.data.success){\n                            storeReducer({\n                                type: GlobalStoreActionType.ADD_LIST,\n                                payload: {\n                                    newListCounter: store.newListCounter + 1,\n                                    idPairs: idPairs,\n                                    currentList: top5List\n                                }\n                            });\n                            store.history.push(\"/top5list/\" + top5List._id);\n                        }\n                    }\n                }\n            }\n            console.log(store);\n            console.log(store.newListCounter);\n        }\n        asyncAddList();\n    }\n\n    //Display modal, if yes then delete marked list, if no then hide modal\n    store.displayDeleteListModal = function (idNamePair) {\n        storeReducer({\n            type: GlobalStoreActionType.MARKED_DELETE_LIST,\n            payload: {idNamePair: idNamePair}\n        });\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    store.deleteMarkedList = function () {\n        async function asyncDeleteMarkedList () {\n            const response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n            if (response.data.success){\n                const response1 = await api.getTop5ListPairs();\n                if (response1.data.success){\n                    storeReducer({\n                        type: GlobalStoreActionType.DELETE_LIST,\n                        payload: response1.data.idNamePairs\n                    });\n                }\n            }\n        }\n        asyncDeleteMarkedList();\n        store.hideDeleteListModal();\n        //This forces a state update which refreshes the react components\n        store.loadIdNamePairs();\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}