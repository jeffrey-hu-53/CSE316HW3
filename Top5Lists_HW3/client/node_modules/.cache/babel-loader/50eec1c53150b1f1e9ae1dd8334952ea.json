{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  ADD_LIST: \"ADD_LIST\",\n  MARKED_DELETE_LIST: \"MARKED_DELETE_LIST\",\n  DELETE_LIST: \"DELETE_LIST\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n      // ADD LIST\n\n      case GlobalStoreActionType.ADD_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idPairs,\n            currentList: payload.currentList,\n            newListCounter: payload.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // MARK DELETE LIST\n\n      case GlobalStoreActionType.MARKED_DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: store.isListNameEditActive,\n            isItemEditActive: store.isItemEditActive,\n            listMarkedForDeletion: payload.idNamePair\n          });\n        }\n      // DELETE LIST\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  }; //Change item name\n\n\n  store.addChangeItemTransaction = function (index, newText) {\n    let oldText = store.currentList.items[index];\n    console.log(oldText);\n    let transaction = new ChangeItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.renameItem = function (index, text) {\n    store.currentList.items[index] = text;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // This enables item name edit\n\n\n  store.setIsItemNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE,\n      payload: store.currentList\n    });\n  }; //function to add list\n\n\n  store.addList = function () {\n    var x;\n\n    async function asyncAddList() {\n      const response = await api.createTop5List({\n        \"name\": `Untitled${store.newListCounter}`,\n        \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n      });\n\n      if (response.data.success) {\n        let id = response.data.top5List._id;\n        const response1 = await api.getTop5ListPairs();\n\n        if (response1.data.success) {\n          let idPairs = response1.data.idNamePairs;\n          const response2 = await api.getTop5ListById(id);\n\n          if (response2.data.success) {\n            let top5List = response2.data.top5List;\n            const response3 = await api.updateTop5ListById(top5List._id, top5List);\n\n            if (response3.data.success) {\n              storeReducer({\n                type: GlobalStoreActionType.ADD_LIST,\n                payload: {\n                  newListCounter: store.newListCounter + 1,\n                  idPairs: idPairs,\n                  currentList: top5List\n                }\n              });\n              store.history.push(\"/top5list/\" + top5List._id);\n            }\n          }\n        }\n      }\n\n      console.log(store);\n      console.log(store.newListCounter);\n    }\n\n    asyncAddList();\n  }; //Display modal, if yes then delete marked list, if no then hide modal\n\n\n  store.displayDeleteListModal = function (idNamePair) {\n    console.log(idNamePair);\n    console.log(\"delete modal to be displayed\");\n    storeReducer({\n      type: GlobalStoreActionType.MARKED_DELETE_LIST,\n      payload: {\n        idNamePair: idNamePair\n      }\n    });\n    console.log(\"list marked\");\n    console.log(idNamePair._id);\n    console.log(store.listMarkedForDeletion);\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.deleteMarkedList = function () {\n    console.log(\"Reached Delete here!\"); // console.log(store.listMarkedForDeletion);\n\n    async function asyncDeleteMarkedList() {\n      const response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n\n      if (response.data.success) {\n        const response1 = await api.getTop5ListPairs();\n\n        if (response1.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.DELETE_LIST,\n            payload: response1.data.idNamePairs\n          });\n        }\n      }\n    }\n\n    asyncDeleteMarkedList();\n    store.hideDeleteListModal(); //This forces a state update which refreshes the react components\n\n    store.loadIdNamePairs();\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"3FRAmbSo6sFbcN0StEjON5Xn67M=\");","map":{"version":3,"sources":["C:/Users/Jeffrey/Documents/GitHub/CSE316HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","ADD_LIST","MARKED_DELETE_LIST","DELETE_LIST","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","SET_ITEM_NAME_EDIT_ACTIVE","idPairs","idNamePair","changeListName","id","newName","asyncChangeListName","response","getTop5ListById","data","success","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","items","i","updateCurrentList","addChangeItemTransaction","index","newText","oldText","renameItem","text","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","setIsItemNameEditActive","addList","x","asyncAddList","createTop5List","response1","response2","response3","displayDeleteListModal","modal","document","getElementById","classList","add","hideDeleteListModal","remove","deleteMarkedList","asyncDeleteMarkedList","deleteTop5ListById"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    ADD_LIST: \"ADD_LIST\",\n    MARKED_DELETE_LIST: \"MARKED_DELETE_LIST\",\n    DELETE_LIST: \"DELETE_LIST\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n\n            case GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null\n                });\n            }\n            // ADD LIST\n            case GlobalStoreActionType.ADD_LIST: {\n                return setStore({\n                    idNamePairs: payload.idPairs,\n                    currentList: payload.currentList,\n                    newListCounter: payload.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // MARK DELETE LIST\n            case GlobalStoreActionType.MARKED_DELETE_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: store.isListNameEditActive,\n                    isItemEditActive: store.isItemEditActive,\n                    listMarkedForDeletion: payload.idNamePair\n                });\n            }\n            // DELETE LIST\n            case GlobalStoreActionType.DELETE_LIST: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    //Change item name\n    store.addChangeItemTransaction = function (index, newText) {\n        let oldText = store.currentList.items[index];\n        console.log(oldText);\n        let transaction = new ChangeItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.renameItem = function (index, text) {\n        store.currentList.items[index] = text;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // This enables item name edit\n    store.setIsItemNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE,\n            payload: store.currentList\n        });\n    }\n\n    //function to add list\n    store.addList = function () {\n        var x;\n        async function asyncAddList () {\n            const response = await api.createTop5List({\n                \"name\": `Untitled${store.newListCounter}`,\n                \"items\": [\n                    \"?\",\n                    \"?\",\n                    \"?\",\n                    \"?\",\n                    \"?\"\n                ]\n            });\n            if (response.data.success){\n                let id = response.data.top5List._id;\n                const response1 = await api.getTop5ListPairs();\n                if (response1.data.success){\n                    let idPairs = response1.data.idNamePairs;\n                    const response2 = await api.getTop5ListById(id);\n                    if (response2.data.success){\n                        let top5List = response2.data.top5List;\n                        const response3 = await api.updateTop5ListById(top5List._id, top5List);\n                        if (response3.data.success){\n                            storeReducer({\n                                type: GlobalStoreActionType.ADD_LIST,\n                                payload: {\n                                    newListCounter: store.newListCounter + 1,\n                                    idPairs: idPairs,\n                                    currentList: top5List\n                                }\n                            });\n                            store.history.push(\"/top5list/\" + top5List._id);\n                        }\n                    }\n                }\n            }\n            console.log(store);\n            console.log(store.newListCounter);\n        }\n        asyncAddList();\n    }\n\n    //Display modal, if yes then delete marked list, if no then hide modal\n    store.displayDeleteListModal = function (idNamePair) {\n        console.log(idNamePair);\n        console.log(\"delete modal to be displayed\");\n        storeReducer({\n            type: GlobalStoreActionType.MARKED_DELETE_LIST,\n            payload: {idNamePair: idNamePair}\n        });\n        console.log(\"list marked\")\n        console.log(idNamePair._id);\n        console.log(store.listMarkedForDeletion);\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    store.deleteMarkedList = function () {\n        console.log(\"Reached Delete here!\");\n        // console.log(store.listMarkedForDeletion);\n        async function asyncDeleteMarkedList () {\n            const response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n            if (response.data.success){\n                const response1 = await api.getTop5ListPairs();\n                if (response1.data.success){\n                    storeReducer({\n                        type: GlobalStoreActionType.DELETE_LIST,\n                        payload: response1.data.idNamePairs\n                    });\n                }\n            }\n        }\n        asyncDeleteMarkedList();\n        store.hideDeleteListModal();\n        //This forces a state update which refreshes the react components\n        store.loadIdNamePairs();\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}